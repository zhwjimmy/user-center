# Version Control Best Practices for Go Projects

## File Management Strategy

### 1. Must Include in Version Control

#### Go Module Files
- **`go.mod`** ✅ **Always commit**
  - Defines module name and Go version
  - Declares direct dependencies and versions
  - Core project configuration file
  - Required for dependency resolution

- **`go.sum`** ✅ **Always commit**
  - Contains checksums for all dependencies
  - Ensures dependency integrity and consistency
  - Prevents dependency tampering
  - Ensures same dependency versions across environments

#### Source Code
- **`*.go`** ✅ **Always commit**
  - Application source code
  - Interface definitions
  - Configuration files

#### Documentation
- **`README.md`** ✅ **Always commit**
- **`docs/**` ✅ **Always commit**
- **`*.md`** ✅ **Always commit** (except generated docs)

### 2. Must NOT Include in Version Control

#### Generated Files
- **`wire_gen.go`** ❌ **Never commit**
  - Generated by Wire dependency injection tool
  - Regenerated on each Wire run
  - Causes merge conflicts if committed

- **`*_mock.go`** ❌ **Never commit**
  - Generated by mockgen tool
  - Based on interface definitions
  - Can be regenerated anytime

#### Build Artifacts
- **`bin/`** ❌ **Never commit**
- **`build/`** ❌ **Never commit**
- **`dist/`** ❌ **Never commit**
- **`*.exe`** ❌ **Never commit**
- **`*.dll`** ❌ **Never commit**
- **`*.so`** ❌ **Never commit**

#### Test Results
- **`coverage.out`** ❌ **Never commit**
- **`coverage.html`** ❌ **Never commit**
- **`coverage.xml`** ❌ **Never commit**
- **`*.cov`** ❌ **Never commit**
- **`*.prof`** ❌ **Never commit**

#### Environment Files
- **`.env`** ❌ **Never commit**
- **`.env.local`** ❌ **Never commit**
- **`.env.*.local`** ❌ **Never commit**
- **`config.local.yaml`** ❌ **Never commit**

#### IDE and Editor Files
- **`.vscode/`** ❌ **Never commit**
- **`.idea/`** ❌ **Never commit**
- **`*.swp`** ❌ **Never commit**
- **`*.swo`** ❌ **Never commit**

#### OS Generated Files
- **`.DS_Store`** ❌ **Never commit**
- **`Thumbs.db`** ❌ **Never commit**
- **`desktop.ini`** ❌ **Never commit**

## .gitignore Best Practices

### 1. Go-Specific Ignores
```gitignore
# Go build artifacts
*.exe
*.exe~
*.dll
*.so
*.dylib
main
*.test
*.out
*.prof

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool
coverage.txt
*.cov
coverage.out
coverage.html
coverage.xml
*.cover

# Go workspace files
go.work
go.work.sum

# Dependency directories
vendor/
```

### 2. Generated Code Ignores
```gitignore
# Wire generated files
wire_gen.go
cmd/usercenter/wire_gen.go

# Swagger generated files
docs/swagger.json
docs/swagger.yaml
docs/docs.go
```

### 3. Build and Distribution
```gitignore
# Build and distribution directories
build/
dist/
bin/
target/

# Air live reload
tmp/
.air/
```

### 4. Environment and Configuration
```gitignore
# Environment and configuration files
.env
.env.local
.env.*.local
.env.development
.env.production
.env.staging
.env.test

# Local configuration overrides
config.local.yaml
config.dev.yaml
config.prod.yaml
config.staging.yaml
*.local.yaml
```

### 5. Database Files
```gitignore
# Database files
*.db
*.sqlite
*.sqlite3
dump.rdb
*.dump

# Database data directories
data/
pgdata/
mongodb_data/
redis_data/
```

## CI/CD Integration

### 1. Generated Files in CI
- Generate `wire_gen.go` in CI: `make wire`
- Generate mocks in CI: `make mock`
- Generate coverage reports in CI: `make test-coverage-xml`
- Never commit these generated files

### 2. Dependency Management
- Always commit `go.mod` and `go.sum`
- Use `go mod tidy` in CI to ensure consistency
- Cache dependencies in CI for faster builds

### 3. Build Artifacts
- Generate build artifacts in CI
- Upload artifacts to CI storage
- Never commit build artifacts to repository

## Common Mistakes to Avoid

### 1. Committing Generated Files
```bash
# ❌ Wrong - Don't commit generated files
git add wire_gen.go
git add internal/mock/*.go

# ✅ Correct - Generate in CI
make wire
make mock
```

### 2. Ignoring Module Files
```bash
# ❌ Wrong - Don't ignore module files
echo "go.mod" >> .gitignore
echo "go.sum" >> .gitignore

# ✅ Correct - Always include module files
# go.mod and go.sum should never be in .gitignore
```

### 3. Committing Environment Files
```bash
# ❌ Wrong - Don't commit environment files
git add .env
git add config.local.yaml

# ✅ Correct - Use environment variables in CI
# Set environment variables in CI/CD platform
```

## Best Practices Summary

### 1. File Classification
| File Type | Commit? | Reason |
|-----------|---------|--------|
| `go.mod` | ✅ Yes | Core project config |
| `go.sum` | ✅ Yes | Dependency integrity |
| `*.go` (source) | ✅ Yes | Application code |
| `wire_gen.go` | ❌ No | Generated by Wire |
| `*_mock.go` | ❌ No | Generated by mockgen |
| `coverage.*` | ❌ No | Test results |
| `bin/` | ❌ No | Build artifacts |

### 2. CI/CD Workflow
1. Checkout code (excludes generated files)
2. Install tools
3. Generate code (mocks, wire)
4. Install dependencies
5. Run tests
6. Generate reports
7. Upload artifacts

### 3. Development Workflow
1. Write source code
2. Generate code locally for testing
3. Commit only source code
4. Let CI generate code for builds

### 4. Team Collaboration
- Document generation commands in README
- Use Makefile targets for consistency
- Ensure all team members understand what to commit
- Regular `.gitignore` reviews
description:
globs:
alwaysApply: false
---
