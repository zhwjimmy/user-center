# UserCenter Project Context

## Architecture Overview

This is a Go-based user management service with a clean architecture design:

### Service Architecture
- **Application Service**: Runs locally for fast development and debugging
- **Dependency Services**: Managed via Docker Compose (databases, cache, message queues)

### Clean Architecture Design
- **Infrastructure Layer** (`internal/infrastructure/`): External dependencies (DB, Cache, MQ)
  - Database: PostgreSQL and MongoDB implementations
  - Cache: Redis implementation with generic Cache interface
  - Messaging: Kafka implementation with generic Event interface
  - Centralized management via InfrastructureManager
- **Business Layer** (`internal/`): Core business logic
  - Services: User, Auth, Event services
  - Repositories: Data access abstractions
  - Handlers: HTTP request handlers
  - Events: Event types, publishers, and handlers
- **Interface Layer**: Clear separation between infrastructure and business logic

### Key Technologies
- **Language**: Go 1.23.1
- **Framework**: Gin (HTTP framework)
- **Database**: PostgreSQL 15 (primary), MongoDB 6.0 (logs)
- **Cache**: Redis 7
- **Message Queue**: Apache Kafka 7.3.0
- **Monitoring**: Prometheus, Jaeger (distributed tracing)
- **Documentation**: Swagger/OpenAPI
- **Dependency Injection**: Google Wire

### Event-Driven Architecture
- **Event Types** (`internal/events/types/`): Business event definitions
- **Event Publishers** (`internal/events/publisher/`): Event publishing abstractions
- **Event Handlers** (`internal/events/handlers/`): Business logic for event processing
- **Infrastructure Decoupling**: Generic Event interface prevents infrastructure from depending on business types

### Development Workflow
- Dependencies: `docker-compose up -d`
- Application: `make run-dev` or `./bin/usercenter`
- Environment: Use `.env` file for automatic variable loading
- Hot reload: Code changes trigger automatic rebuild

### Key Directories
- `cmd/usercenter/`: Application entry point with Wire DI
- `internal/infrastructure/`: External dependency implementations
- `internal/events/`: Event-driven architecture components
- `internal/service/`: Business logic services
- `internal/handler/`: HTTP request handlers
- `internal/repository/`: Data access layer
- `configs/`: Configuration files
- `docs/`: Documentation
- `migrations/`: Database migrations

### Environment Variables
Required for local development:
- `USERCENTER_DATABASE_POSTGRES_HOST=localhost`
- `USERCENTER_DATABASE_POSTGRES_PORT=5432`
- `USERCENTER_DATABASE_POSTGRES_USER=postgres`
- `USERCENTER_DATABASE_POSTGRES_PASSWORD=password`
- `USERCENTER_DATABASE_POSTGRES_DBNAME=usercenter`
- `USERCENTER_DATABASE_POSTGRES_SSLMODE=disable`
description:
globs:
alwaysApply: false
---
