# CI/CD Best Practices for Go Projects

## GitHub Actions Optimization

### 1. Tool Installation
- Install development tools in parallel using background processes
- Use `&` and `wait` for concurrent tool installation
- Example:
```bash
go install tool1@latest &
go install tool2@latest &
go install tool3@latest &
wait
```

### 2. Dependency Management
- Always include `go.mod` and `go.sum` in version control
- Use `go mod tidy` before `go mod verify`
- Remove verbose logging (go env, go mod graph) in CI
- Cache dependencies with explicit paths:
```yaml
cache-dependency-path: |
  **/go.sum
```

### 3. Code Generation Order
- Install tools first
- Generate mocks before dependency resolution
- Generate Wire code before building
- This prevents "no matching versions" errors for internal packages

### 4. Test Execution
- Create coverage directory before running tests: `mkdir -p coverage`
- Use parallel test execution: `go test -p=4`
- Combine test and coverage generation in single step
- Avoid unnecessary verbose output

### 5. File Management
- Keep generated files out of version control:
  - `wire_gen.go` - generated by Wire
  - `*_mock.go` - generated by mockgen
  - `coverage.*` - generated by tests
- Generate these files in CI environment

## Makefile Best Practices

### Mock Generation
```makefile
.PHONY: mock
mock: ## Generate mock files
	@echo "Generating mocks..."
	mockgen -source=internal/service/user.go -destination=internal/mock/user_service_mock.go -package=mock
	mockgen -source=internal/repository/user.go -destination=internal/mock/user_repository_mock.go -package=mock
	mockgen -source=internal/service/auth.go -destination=internal/mock/auth_service_mock.go -package=mock
```

### Test Coverage
```makefile
.PHONY: test-coverage-xml
test-coverage-xml: ## Generate XML coverage report for CI/CD
	@echo "Generating XML coverage report..."
	@mkdir -p $(COVERAGE_DIR)
	$(GOTEST) -v -coverprofile=$(COVERAGE_OUT) -covermode=atomic ./...
	gocov convert $(COVERAGE_OUT) | gocov-xml > $(COVERAGE_XML)
	@echo "XML coverage report generated: $(COVERAGE_XML)"
```

## Common Issues and Solutions

### 1. Mock Package Resolution
- Problem: `no matching versions for query "latest"` for internal/mock
- Solution: Generate mocks before `go mod tidy`
- Use `-package=mock` flag in mockgen

### 2. Wire Code Generation
- Problem: `undefined: InitializeApp`
- Solution: Install Wire tool and generate code in CI
- Keep `wire_gen.go` out of version control

### 3. Coverage Directory
- Problem: `no such file or directory` for coverage.out
- Solution: Create directory before test execution: `mkdir -p coverage`

### 4. Dependency Cache
- Problem: Slow dependency resolution
- Solution: Use explicit cache paths and parallel installation

## Performance Optimization

### Execution Time Reduction
- Parallel tool installation: 30-50% faster
- Remove verbose logging: 10-20% faster
- Parallel test execution: 20-30% faster
- Proper caching: 40-60% faster on subsequent runs

### Resource Usage
- Only run necessary jobs (test vs build/docker)
- Use appropriate runner types
- Cache dependencies and build artifacts
- Clean up temporary files
description: "CI/CD best practices and GitHub Actions optimization for UserCenter"
globs: [".github/**/*.yml", "Makefile", "Dockerfile"]
alwaysApply: false
---
