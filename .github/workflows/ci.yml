name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23.1'
  CGO_ENABLED: 0

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: usercenter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: |
          **/go.sum
          go.mod

    - name: Cache Go tools
      uses: actions/cache@v4
      with:
        path: |
          $HOME/go/bin
          $HOME/.cache/go-build
        key: ${{ runner.os }}-go-tools-${{ hashFiles('go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-tools-

    - name: Ensure go tools directory exists
      run: |
        mkdir -p $HOME/go/bin
        echo "Go tools directory created: $HOME/go/bin"

    - name: Install tools
      run: |
        echo "Installing development tools..."
        
        # Always install tools to ensure they exist in $HOME/go/bin
        echo "Installing tools to $HOME/go/bin..."
        go install github.com/golang/mock/mockgen@v1.6.0
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest
        go install github.com/google/wire/cmd/wire@v0.6.0
        
        echo "Tools installed successfully"
        echo "Installed tools:"
        ls -la $HOME/go/bin/
        
        # Add tools to PATH
        echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Generate mocks
      run: make mock

    - name: Generate Wire code
      run: make wire

    - name: Install dependencies
      run: |
        echo "Current directory: $(pwd)"
        echo "Go version: $(go version)"
        echo "Downloading dependencies..."
        go mod download
        echo "Running go mod tidy..."
        go mod tidy
        echo "Verifying modules..."
        go mod verify
        echo "Dependencies installed successfully"

    - name: Verify dependencies
      run: |
        go build -o /dev/null ./cmd/usercenter

    # - name: Run linter
    #   run: make lint

    # - name: Run security checks
    #   run: make security

    - name: Run tests with coverage
      run: |
        # Create coverage directory
        mkdir -p coverage
        # Run tests with coverage in parallel
        go test -v -coverprofile=coverage/coverage.out -covermode=atomic -p=4 ./...
        # Generate XML coverage report
        gocov convert coverage/coverage.out | gocov-xml > coverage/coverage.xml
        echo "XML coverage report generated: coverage/coverage.xml"
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: usercenter_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # build:
  #   name: Build
  #   runs-on: ubuntu-latest
  #   needs: test

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: ${{ env.GO_VERSION }}
  #       cache: true

  #   - name: Build for multiple platforms
  #     run: make build-all

  #   - name: Upload build artifacts
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: binaries
  #       path: bin/
  #       retention-days: 30

  # docker:
  #   name: Docker Build
  #   runs-on: ubuntu-latest
  #   needs: test

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Build Docker image
  #     run: make docker-build

  #   - name: Upload Docker image
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: docker-image
  #       path: |
  #         usercenter:latest
  #       retention-days: 30 