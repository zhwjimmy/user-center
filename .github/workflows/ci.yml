name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.23.1'
  CGO_ENABLED: 0

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: usercenter_test
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 3s
          --health-retries 3
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 3s
          --health-retries 3
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: |
          **/go.sum
          go.mod

    - name: Cache Go tools
      uses: actions/cache@v4
      with:
        path: |
          $HOME/go/bin
          $HOME/.cache/go-build
        key: ${{ runner.os }}-go-tools-${{ hashFiles('go.mod') }}-${{ hashFiles('Makefile') }}
        restore-keys: |
          ${{ runner.os }}-go-tools-${{ hashFiles('go.mod') }}-
          ${{ runner.os }}-go-tools-

    - name: Install tools (cached)
      run: |
        echo "Installing development tools..."
        
        # Check if tools are already installed
        if [ -f "$HOME/go/bin/mockgen" ] && [ -f "$HOME/go/bin/wire" ] && [ -f "$HOME/go/bin/gocov" ] && [ -f "$HOME/go/bin/gocov-xml" ]; then
          echo "Tools already installed, skipping installation"
        else
          echo "Installing tools to $HOME/go/bin..."
          go install github.com/golang/mock/mockgen@v1.6.0
          go install github.com/axw/gocov/gocov@latest
          go install github.com/AlekSi/gocov-xml@latest
          go install github.com/google/wire/cmd/wire@v0.6.0
          echo "Tools installed successfully"
        fi
        
        echo "Installed tools:"
        ls -la $HOME/go/bin/
        
        # Add tools to PATH
        echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        echo "Current directory: $(pwd)"
        echo "Go version: $(go version)"
        echo "Downloading dependencies..."
        go mod download
        echo "Running go mod tidy..."
        go mod tidy
        echo "Verifying modules..."
        go mod verify
        echo "Dependencies installed successfully"

    - name: Generate mocks and Wire code
      run: |
        echo "Generating mocks..."
        make mock
        echo "Generating Wire code..."
        make wire
        echo "Code generation completed"

    - name: Verify dependencies
      run: |
        go build -o /dev/null ./cmd/usercenter

    - name: Run tests with coverage
      run: |
        # Create coverage directory
        mkdir -p coverage
        # Run tests with coverage in parallel
        go test -v -coverprofile=coverage/coverage.out -covermode=atomic -p=4 ./...
        # Generate XML coverage report
        gocov convert coverage/coverage.out | gocov-xml > coverage/coverage.xml
        echo "XML coverage report generated: coverage/coverage.xml"
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: usercenter_test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build for multiple platforms
      run: make build-all

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: bin/
        retention-days: 30

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: make docker-build

    - name: Upload Docker image
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: |
          usercenter:latest
        retention-days: 30 